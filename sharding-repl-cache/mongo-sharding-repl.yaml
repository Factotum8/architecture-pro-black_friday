version: "3.9"

# MongoDB sharded cluster (dev-friendly) with 2 shards
# Layout
# - 1x config server (single-member replset for simplicity)
# - 2x shards (each a single-member replica set)
# - 1x mongos router
# - 3x init jobs to initiate the replsets + 1x init job to add shards
# Notes
# - This is great for local development. For production, use multi-member replica sets
#   for each shard and the config server, add keyfile/x.509 auth, and proper storage.

services:
  # -------------------- CONFIG SERVER --------------------
  configsvr:
    image: mongo:7.0
    container_name: configsvr
    command: ["mongod", "--configsvr", "--replSet", "configReplSet", "--port", "27019", "--bind_ip_all"]
    networks: [shardnet]
    volumes:
      - configdb:/data/configdb
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27019", "--eval", "db.adminCommand({ ping: 1 })"]
      interval: 5s
      timeout: 3s
      retries: 60

  init-configrs:
    image: mongo:7.0
    container_name: init-configrs
    depends_on:
      configsvr:
        condition: service_healthy
    networks: [shardnet]
    restart: "no"
    entrypoint: ["bash", "-lc", "mongosh --host configsvr --port 27019 --eval 'rs.initiate({_id:\"configReplSet\", configsvr:true, members:[{_id:0, host:\"configsvr:27019\"}]})' || true"]

  # -------------------- SHARD 1 --------------------
  shard1:
    image: mongo:7.0
    container_name: shard1
    command: ["mongod", "--shardsvr", "--replSet", "shard1RS", "--port", "27018", "--bind_ip_all"]
    networks: [shardnet]
    volumes:
      - shard1db:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27018", "--eval", "db.adminCommand({ ping: 1 })"]
      interval: 5s
      timeout: 3s
      retries: 60

  shard1b:
    image: mongo:7.0
    container_name: shard1b
    command: ["mongod", "--shardsvr", "--replSet", "shard1RS", "--port", "27018", "--bind_ip_all"]
    networks: [shardnet]
    volumes:
      - shard1db_b:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27018", "--eval", "db.adminCommand({ ping: 1 })"]
      interval: 5s
      timeout: 3s
      retries: 60

  shard1c:
    image: mongo:7.0
    container_name: shard1c
    command: ["mongod", "--shardsvr", "--replSet", "shard1RS", "--port", "27018", "--bind_ip_all"]
    networks: [shardnet]
    volumes:
      - shard1db_c:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27018", "--eval", "db.adminCommand({ ping: 1 })"]
      interval: 5s
      timeout: 3s
      retries: 60

  init-shard1rs:
    image: mongo:7.0
    container_name: init-shard1rs
    depends_on:
      shard1:
        condition: service_healthy
      shard1b:
        condition: service_healthy
      shard1c:
        condition: service_healthy
    networks: [shardnet]
    restart: "no"
    entrypoint: ["bash", "-lc", "mongosh --host shard1 --port 27018 --eval 'rs.initiate({_id:\"shard1RS\", members:[{_id:0, host:\"shard1:27018\"},{_id:1, host:\"shard1b:27018\"},{_id:2, host:\"shard1c:27018\"}]})' || true"]

  # -------------------- SHARD 2 --------------------
  shard2:
    image: mongo:7.0
    container_name: shard2
    command: ["mongod", "--shardsvr", "--replSet", "shard2RS", "--port", "27018", "--bind_ip_all"]
    networks: [shardnet]
    volumes:
      - shard2db:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27018", "--eval", "db.adminCommand({ ping: 1 })"]
      interval: 5s
      timeout: 3s
      retries: 60

  shard2b:
    image: mongo:7.0
    container_name: shard2b
    command: ["mongod", "--shardsvr", "--replSet", "shard2RS", "--port", "27018", "--bind_ip_all"]
    networks: [shardnet]
    volumes:
      - shard2db_b:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27018", "--eval", "db.adminCommand({ ping: 1 })"]
      interval: 5s
      timeout: 3s
      retries: 60

  shard2c:
    image: mongo:7.0
    container_name: shard2c
    command: ["mongod", "--shardsvr", "--replSet", "shard2RS", "--port", "27018", "--bind_ip_all"]
    networks: [shardnet]
    volumes:
      - shard2db_c:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27018", "--eval", "db.adminCommand({ ping: 1 })"]
      interval: 5s
      timeout: 3s
      retries: 60

  init-shard2rs:
    image: mongo:7.0
    container_name: init-shard2rs
    depends_on:
      shard2:
        condition: service_healthy
      shard2b:
        condition: service_healthy
      shard2c:
        condition: service_healthy
    networks: [shardnet]
    restart: "no"
    entrypoint: ["bash", "-lc", "mongosh --host shard2 --port 27018 --eval 'rs.initiate({_id:\"shard2RS\", members:[{_id:0, host:\"shard2:27018\"},{_id:1, host:\"shard2b:27018\"},{_id:2, host:\"shard2c:27018\"}]})' || true"]

  # -------------------- MONGOS ROUTER --------------------
  mongos:
    image: mongo:7.0
    container_name: mongos
    depends_on:
      configsvr:
        condition: service_healthy
      shard1:
        condition: service_healthy
      shard2:
        condition: service_healthy
    command: ["mongos", "--configdb", "configReplSet/configsvr:27019", "--bind_ip_all", "--port", "27017"]
    ports:
      - "27017:27017"  # connect here from your apps
    networks: [shardnet]
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27017", "--eval", "db.adminCommand({ ping: 1 })"]
      interval: 5s
      timeout: 3s
      retries: 60

  # -------------------- ADD SHARDS TO ROUTER --------------------
  init-router:
    image: mongo:7.0
    container_name: init-router
    depends_on:
      mongos:
        condition: service_healthy
      init-configrs:
        condition: service_completed_successfully
      init-shard1rs:
        condition: service_completed_successfully
      init-shard2rs:
        condition: service_completed_successfully
    networks: [shardnet]
    restart: "no"
    entrypoint: ["bash", "-lc", "\
      echo 'Waiting a moment for replsets to settle...' && sleep 3 && \
      mongosh --host mongos --port 27017 --eval 'sh.addShard(\"shard1RS/shard1:27018,shard1b:27018,shard1c:27018\"); sh.addShard(\"shard2RS/shard2:27018,shard2b:27018,shard2c:27018\"); printjson(sh.status())' || true \
    "]

  pymongo_api:
    container_name: pymongo_api
    build:
      context: api_app
      dockerfile: Dockerfile
    depends_on:
      - mongos
    networks: [shardnet]
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://mongos"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis-node-1:7001"

# Redis Cluster (3 nodes: 3 masters, 0 replicas)
# - Minimal cluster suitable for local dev
# - Exposes ports 7001..7003 on localhost
# - AOF persistence enabled
# - Init job auto-creates the cluster with --cluster-replicas 0

  redis-node-1:
    image: redis:7-alpine
    container_name: redis-node-1
    command: [
      "redis-server", "--port", "7001",
      "--cluster-enabled", "yes",
      "--cluster-config-file", "/data/nodes.conf",
      "--cluster-node-timeout", "5000",
      "--appendonly", "yes",
      "--protected-mode", "no",
      "--cluster-announce-port", "7001",
      "--cluster-announce-bus-port", "17001"
    ]
    ports: ["7001:7001"]
    networks: [shardnet]
    volumes: ["redis1:/data"]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -p 7001 ping | grep PONG"]
      interval: 5s
      timeout: 3s
      retries: 60

  redis-node-2:
    image: redis:7-alpine
    container_name: redis-node-2
    command: [
      "redis-server", "--port", "7002",
      "--cluster-enabled", "yes",
      "--cluster-config-file", "/data/nodes.conf",
      "--cluster-node-timeout", "5000",
      "--appendonly", "yes",
      "--protected-mode", "no",
      "--cluster-announce-port", "7002",
      "--cluster-announce-bus-port", "17002"
    ]
    ports: ["7002:7002"]
    networks: [shardnet]
    volumes: ["redis2:/data"]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -p 7002 ping | grep PONG"]
      interval: 5s
      timeout: 3s
      retries: 60

  redis-node-3:
    image: redis:7-alpine
    container_name: redis-node-3
    command: [
      "redis-server", "--port", "7003",
      "--cluster-enabled", "yes",
      "--cluster-config-file", "/data/nodes.conf",
      "--cluster-node-timeout", "5000",
      "--appendonly", "yes",
      "--protected-mode", "no",
      "--cluster-announce-port", "7003",
      "--cluster-announce-bus-port", "17003"
    ]
    ports: ["7003:7003"]
    networks: [shardnet]
    volumes: ["redis3:/data"]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -p 7003 ping | grep PONG"]
      interval: 5s
      timeout: 3s
      retries: 60

  init-redis-cluster:
    image: redis:7-alpine
    container_name: init-redis-cluster
    depends_on:
      redis-node-1:
        condition: service_healthy
      redis-node-2:
        condition: service_healthy
      redis-node-3:
        condition: service_healthy
    networks: [shardnet]
    restart: "no"
    entrypoint: ["sh", "-c", "echo yes | redis-cli --cluster create \
      redis-node-1:7001 redis-node-2:7002 redis-node-3:7003 \
      --cluster-replicas 0 && \
      echo 'Redis Cluster (3-node) created' "]


networks:
  shardnet: {}

volumes:
  configdb: {}
  shard1db: {}
  shard1db_b: {}
  shard1db_c: {}
  shard2db: {}
  shard2db_b: {}
  shard2db_c: {}
  redis1: {}
  redis2: {}
  redis3: {}